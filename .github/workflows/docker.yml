name: Docker

on:
  push:
    paths:
      - .github/workflows/docker.yml
      - Dockerfile
      - CMakeLists.txt
      - grpc/**
      - mediocre/**
      - scripts/deploy/**
      - scripts/run/**
  release:
    types:
      - "published"

env:
  GITHUB_REPOSITORY: obroomhall/mediocre
  DOCKER_REPOSITORY: obroomhall/mediocre
  DOCKER_USERNAME: obroomhall

jobs:

  build_push:
    name: Build
    runs-on: ubuntu-latest
    outputs:
      main: ${{ steps.tags.outputs.main }}
      sha: ${{ steps.tags.outputs.sha }}
      current-pr: ${{ steps.current-pr.outputs.number }}
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        env:
          DOCKER_METADATA_PR_HEAD_SHA: true
        with:
          images: |
            ${{ env.DOCKER_REPOSITORY }}
          # be aware of priorities here, since highest priority determines the label org.opencontainers.image.version
          # any tag with an unspecified priority receives a default, see https://github.com/docker/metadata-action#priority-attribute
          # they also determine the order of the output array
          tags: |
            type=ref,event=branch,priority=6
            type=ref,event=tag,priority=6
            type=ref,event=pr,priority=6
            type=sha,priority=4
            type=raw,value=master,priority=2
      - name: Install JQ
        run: sudo apt install -y jq
      - name: Get current PR
        id: current-pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          export current_pr_number=$(gh pr list --head ${{ github.ref_name }} --json number --jq ".[0].number")
          echo "Current PR is: $current_pr_number"
          echo "number=$current_pr_number" >> "$GITHUB_OUTPUT"
      - name: Get most recently closed PR
        id: last-pr
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          export most_recent_closed_pr_number=$(gh pr list --state closed --limit 1 --json number --jq ".[0].number")
          echo "Last closed PR was: $most_recent_closed_pr_number"
          echo "number=$most_recent_closed_pr_number" >> "$GITHUB_OUTPUT"
      - name: Docker meta parse
        id: tags
        run: |
          echo "main=${{ fromJSON(steps.meta.outputs.json).tags[0] }}" >> "$GITHUB_OUTPUT"
          echo "sha=${{ fromJSON(steps.meta.outputs.json).tags[1] }}" >> "$GITHUB_OUTPUT"
          echo "fallback=${{ fromJSON(steps.meta.outputs.json).tags[2] || format('{0}:pr-{1}', env.DOCKER_REPOSITORY, steps.last-pr.outputs.number) }}" >> "$GITHUB_OUTPUT"
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Build and push sha image develop
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: ${{ steps.tags.outputs.sha }}-develop
          labels: ${{ steps.meta-sha.outputs.labels }}
          push: true
          cache-from: |
            type=registry,ref=${{ steps.tags.outputs.sha }}-develop-cache
            type=registry,ref=${{ steps.tags.outputs.main }}-develop-cache
            type=registry,ref=${{ steps.tags.outputs.fallback }}-develop-cache
          cache-to: |
            type=registry,ref=${{ steps.tags.outputs.sha }}-develop-cache
            type=registry,ref=${{ steps.tags.outputs.main }}-develop-cache
          target: develop
      - name: Build and push sha image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          tags: ${{ steps.tags.outputs.sha }}
          labels: ${{ steps.meta-sha.outputs.labels }}
          push: true
          cache-from: |
            type=registry,ref=${{ steps.tags.outputs.sha }}-cache
            type=registry,ref=${{ steps.tags.outputs.main }}-cache
            type=registry,ref=${{ steps.tags.outputs.fallback }}-cache
          cache-to: type=registry,ref=${{ steps.tags.outputs.sha }}-cache

  test_push:
    name: Test
    runs-on: ubuntu-latest
    needs: build_push
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      - name: Install testing tools
        env:
          GRPC_CLIENT_CLI_VERSION: 1.18.0
        run: curl -L -s https://github.com/vadimi/grpc-client-cli/releases/download/v${{ env.GRPC_CLIENT_CLI_VERSION }}/grpc-client-cli_linux_x86_64.tar.gz | tar -C /usr/local/bin -xz
      - name: Pull updated sha image
        run: docker pull ${{ needs.build_push.outputs.sha }}
      - name: Start container
        run: |
          docker run -d --rm --name mediocre -p 127.0.0.1:80:8081/tcp ${{ needs.build_push.outputs.sha }}
          export max_retries=20
          export cur_retries=0
          until [[ $(grpc-client-cli health 127.0.0.1:80 | jq -r '.status') == 'SERVING' ]]; do
            if (( $cur_retries >= $max_retries )); then exit 1; fi
            echo "Waiting for a healthy container...($cur_retries/$max_retries)"
            sleep 0.05
            export cur_retries=$((cur_retries+1))
          done
          echo "Container is healthy!"
      - name: Check OpenCV
        run: |
          check_opencv=$(echo '{}' | grpc-client-cli -service Dependency -method CheckOpenCV 127.0.0.1:80)
          echo $check_opencv && [[ $(echo $check_opencv | jq '.healthy') == 'true' ]]
      - name: Check Tesseract
        run: |
          check_tesseract=$(echo '{}' | grpc-client-cli -service Dependency -method CheckTesseract localhost:80)
          echo $check_tesseract && [[ $(echo $check_tesseract | jq '.healthy') == 'true' ]]
      - name: Stop container
        run: |
          docker logs -f mediocre &
          docker stop mediocre
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Re-tag image and cache
        run: |
          docker buildx imagetools create --tag ${{ needs.build_push.outputs.main }}-cache ${{ needs.build_push.outputs.sha }}-cache
          docker buildx imagetools create --tag ${{ needs.build_push.outputs.main }} ${{ needs.build_push.outputs.sha }}

  preview:
    name: Preview
    runs-on: ubuntu-latest
    needs: [ build_push, test_push ]
    if: ${{ needs.build_push.outputs.current-pr }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: scripts/deploy
          sparse-checkout-cone-mode: false
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.STAGING_SSH_KEY }}
      - name: Setup known hosts
        run: ssh-keyscan -H ${{ secrets.STAGING_IP }} >> ~/.ssh/known_hosts
      - name: Deploy Preview
        working-directory: scripts/deploy
        run: |
          ssh ${{ secrets.STAGING_USER }}@${{ secrets.STAGING_IP }} \
            "bash -s ${{ needs.build_push.outputs.main }} ${{ needs.build_push.outputs.current-pr }}" \
            < deploy-preview.sh

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: [ build_push, test_push ]
    if: ${{ github.ref == format('refs/heads/{0}', github.event.repository.default_branch) }}
    steps:
      - uses: actions/checkout@v4
        with:
          sparse-checkout: scripts/deploy
          sparse-checkout-cone-mode: false
      - uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.PROD_SSH_KEY }}
      - name: Setup known hosts
        run: ssh-keyscan -H ${{ secrets.PROD_IP }} >> ~/.ssh/known_hosts
      - name: Deploy Production
        working-directory: scripts/deploy
        run: |
          ssh ${{ secrets.PROD_USER }}@${{ secrets.PROD_IP }} \
            'bash -s' \
            < deploy-production.sh
