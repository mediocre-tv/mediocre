name: Docker

on:
  pull_request:
    paths:
      - .github/workflows/docker.yml
      - Dockerfile
      - CMakeLists.txt
      - libmediocre/**
  push:
    branches:
      - master
    paths:
      - .github/workflows/docker.yml
      - Dockerfile
      - CMakeLists.txt
      - libmediocre/**
  release:
    types:
      - "published"

env:
  REPOSITORY: obroomhall/mediocre
  DOCKER_USERNAME: obroomhall

jobs:

  build_push:
    name: Build push sha image
    runs-on: ubuntu-latest
    outputs:
      labels: ${{ steps.meta.outputs.labels }}
      main: ${{ steps.tags.outputs.main }}
      main-cache: ${{ steps.tags.outputs.main-cache }}
      sha: ${{ steps.tags.outputs.sha }}
      sha-cache: ${{ steps.tags.outputs.sha-cache }}
    steps:
      -
        name: Check out the repo
        uses: actions/checkout@v3
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REPOSITORY }}
          # be aware of priorities here, since highest priority determines the label org.opencontainers.image.version
          # any tag with an unspecified priority receives a default, see https://github.com/docker/metadata-action#priority-attribute
          # they also determine the order of the output array
          tags: |
            type=ref,event=branch,priority=6
            type=ref,event=tag,priority=6
            type=ref,event=pr,priority=6
            type=sha,priority=4
            type=raw,value=master,priority=2
      -
        name: Get most recently closed PR
        id: last-pr
        run: |
          sudo apt install -y jq
          export most_recent_closed_pr_number=$(curl -s https://api.github.com/repos/${REPOSITORY}/pulls?state=closed | jq ".[] | .number" | head -1)
          echo "Last closed PR was: $most_recent_closed_pr_number"
          echo "number=$most_recent_closed_pr_number" >> "$GITHUB_OUTPUT"
      -
        name: Docker meta parse
        id: tags
        run: |
          export main_tag=${{ fromJSON(steps.meta.outputs.json).tags[0] }}
          export sha_tag=${{ fromJSON(steps.meta.outputs.json).tags[1] }}
          export fallback_tag=${{ fromJSON(steps.meta.outputs.json).tags[2] || format('{0}:pr-{1}', env.REPOSITORY, steps.last-pr.outputs.number) }}
          echo "main=$main_tag" >> "$GITHUB_OUTPUT"
          echo "main-cache=${main_tag}-cache" >> "$GITHUB_OUTPUT"
          echo "sha=$sha_tag" >> "$GITHUB_OUTPUT"
          echo "sha-cache=${sha_tag}-cache" >> "$GITHUB_OUTPUT"
          echo "fallback=$fallback_tag" >> "$GITHUB_OUTPUT"
          echo "fallback-cache=${fallback_tag}-cache" >> "$GITHUB_OUTPUT"
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      -
        name: Build and push sha image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          tags: ${{ steps.tags.outputs.sha }}
          labels: ${{ steps.meta-sha.outputs.labels }}
          push: true
          cache-from: |
            type=registry,ref=${{ steps.tags.outputs.sha-cache }}
            type=registry,ref=${{ steps.tags.outputs.main-cache }}
            type=registry,ref=${{ steps.tags.outputs.fallback-cache }}
          cache-to: type=registry,ref=${{ steps.tags.outputs.sha-cache }}

  test_push:
    name: Test and push image
    runs-on: ubuntu-latest
    needs: build_push
    steps:
      -
        name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ env.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_PASSWORD }}
      -
        name: Install testing tools
        env:
          GRPC_CLIENT_CLI_VERSION: 1.18.0
        run: curl -L -s https://github.com/vadimi/grpc-client-cli/releases/download/v${{ env.GRPC_CLIENT_CLI_VERSION }}/grpc-client-cli_linux_x86_64.tar.gz | tar -C /usr/local/bin -xz
      -
        name: Pull updated sha image
        run: |
          docker pull ${{ needs.build_push.outputs.sha }}
          sudo ls -lh /var/lib/docker/image
          sudo ls -lh /var/lib/docker/overlay2
          docker image inspect ${{ needs.build_push.outputs.sha }}
      -
        name: Start container
        run: |
          docker run -d --rm --name mediocre -p 127.0.0.1:80:50051/tcp ${{ needs.build_push.outputs.sha }}
          export max_retries=20
          export cur_retries=0
          until [[ $(grpc-client-cli health 127.0.0.1:80 | jq -r '.status') == 'SERVING' ]]; do
            if (( $cur_retries >= $max_retries )); then exit 1; fi
            echo "Waiting for a healthy container...($cur_retries/$max_retries)"
            sleep 0.05
            export cur_retries=$((cur_retries+1))
          done
          echo "Container is healthy!"
      -
        name: Check OpenCV
        run: |
          check_opencv=$(echo '{}' | grpc-client-cli -service Dependency -method CheckOpenCV 127.0.0.1:80)
          echo $check_opencv && [[ $(echo $check_opencv | jq '.healthy') == 'true' ]]
      -
        name: Check Tesseract
        run: |
          check_tesseract=$(echo '{}' | grpc-client-cli -service Dependency -method CheckTesseract localhost:80)
          echo $check_tesseract && [[ $(echo $check_tesseract | jq '.healthy') == 'true' ]]
      -
        name: Stop container
        run: |
          docker logs -f mediocre &
          docker stop mediocre
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Re-tag image and cache
        run: |
          docker buildx imagetools create --tag ${{ needs.build_push.outputs.main-cache }} ${{ needs.build_push.outputs.sha-cache }}
          docker buildx imagetools create --tag ${{ needs.build_push.outputs.main }} ${{ needs.build_push.outputs.sha }}
